{"ast":null,"code":"import { takeLatest, all, call, put } from 'redux-saga/effects';\nimport { auth, googleProvider, createuserProfileDocument, checkIfUserAuthenticated } from '../../firebase/firebase.utilities';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, userSignoutSuccess, userSignoutFailure, signUpFailure, signUpSuccess } from './user.action';\n\nfunction* createUserSnapshot(userAuth, additionalInfo) {\n  try {\n    const userRef = yield call(createuserProfileDocument, userAuth, additionalInfo);\n    const snapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: snapshot.id,\n      ...snapshot.data()\n    }));\n  } catch (error) {\n    /// TODO: ADD Logger Like Sentry\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* googleSignInStartAsync() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield createUserSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* emailSignInStartAsync({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield createUserSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const user = yield checkIfUserAuthenticated();\n    if (!user) return;\n    yield createUserSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* userSignout() {\n  try {\n    yield auth.signOut();\n    yield put(userSignoutSuccess());\n  } catch (error) {\n    yield put(userSignoutFailure(error));\n  }\n}\nexport function* userSignUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess(user, {\n      displayName\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    createdUser,\n    additionalInfo: displayName\n  }\n}) {\n  yield createUserSnapshot(createdUser, displayName);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignInStartAsync);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignInStartAsync);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignUp() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, userSignUp);\n}\nexport function* onUserSignOut() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, userSignout);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onUserSignOut), call(onSignUp), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/Users/wafaa.nasr/Documents/Study/learn-react/crwn-clothing/client/src/redux/user/user.sagas.js"],"names":["takeLatest","all","call","put","auth","googleProvider","createuserProfileDocument","checkIfUserAuthenticated","UserActionTypes","signInSuccess","signInFailure","userSignoutSuccess","userSignoutFailure","signUpFailure","signUpSuccess","createUserSnapshot","userAuth","additionalInfo","userRef","snapshot","get","id","data","error","googleSignInStartAsync","user","signInWithPopup","emailSignInStartAsync","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","userSignout","signOut","userSignUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","createdUser","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignUp","SIGN_UP_START","onUserSignOut","SIGN_OUT_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, all, call, put } from 'redux-saga/effects';\nimport { auth, googleProvider, createuserProfileDocument, checkIfUserAuthenticated } from '../../firebase/firebase.utilities';\nimport UserActionTypes from './user.types';\nimport {\n    signInSuccess,\n    signInFailure,\n    userSignoutSuccess,\n    userSignoutFailure,\n    signUpFailure,\n    signUpSuccess\n} from './user.action';\n\nfunction* createUserSnapshot(userAuth, additionalInfo) {\n    try {\n        const userRef = yield call(createuserProfileDocument, userAuth, additionalInfo);\n        const snapshot = yield userRef.get();\n        yield put(signInSuccess({\n            id: snapshot.id,\n            ...snapshot.data()\n        }));\n    } catch (error) {\n        /// TODO: ADD Logger Like Sentry\n        yield put(signInFailure(error));\n    }\n}\nexport function* googleSignInStartAsync() {\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield createUserSnapshot(user);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n\n}\n\nexport function* emailSignInStartAsync({ payload: { email, password } }) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield createUserSnapshot(user);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n\n}\n\nexport function* isUserAuthenticated() {\n    try {\n        const user = yield checkIfUserAuthenticated();\n        if (!user) return;\n        yield createUserSnapshot(user);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n\n}\n\nexport function* userSignout() {\n    try {\n        yield auth.signOut();\n        yield put(userSignoutSuccess());\n    } catch (error) {\n        yield put(userSignoutFailure(error));\n    }\n}\n\nexport function* userSignUp({ payload: { email, password, displayName } }) {\n    try {\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n        yield put(signUpSuccess(user, {displayName}))\n    } catch (error) {\n        yield put(signUpFailure(error));\n    }\n}\n\nexport function* signInAfterSignUp({ payload: { createdUser, additionalInfo: displayName } }) {\n    yield createUserSnapshot(createdUser, displayName);\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignInStartAsync);\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignInStartAsync);\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* onSignUp() {\n    yield takeLatest(UserActionTypes.SIGN_UP_START, userSignUp);\n}\n\nexport function* onUserSignOut() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, userSignout);\n}\nexport function* onSignUpSuccess() {\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onCheckUserSession),\n        call(onUserSignOut),\n        call(onSignUp),\n        call(onSignUpSuccess)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}