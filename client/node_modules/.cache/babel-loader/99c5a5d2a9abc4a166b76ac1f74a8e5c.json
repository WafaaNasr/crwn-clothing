{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAnHmVYqlzt2jzH5vjVetqtgOks3aATVGk\",\n  authDomain: \"crwn-db-fce26.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-fce26.firebaseio.com\",\n  projectId: \"crwn-db-fce26\",\n  storageBucket: \"\",\n  messagingSenderId: \"1057394833621\",\n  appId: \"1:1057394833621:web:a0efaa4a5caa6afea1ca5c\",\n  measurementId: \"G-14J2ZWKY5P\"\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const createuserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const userSnapshot = await userRef.get();\n\n  if (!userSnapshot.exists) {\n    const {\n      email,\n      displayName\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      userRef.set({\n        email,\n        displayName,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error while saving user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const convertCollectionsToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollections.reduce((acc, coll) => {\n    acc[coll.title.toLowerCase()] = coll;\n    return acc;\n  }, {});\n};\nexport const createCollectionsAndDocuments = async (collectionKey, docsToAdd) => {\n  const collRef = firestore.collection(collectionKey); // Firebase can only call one set() a time.\n  // even if we called collRef.set(array) it's going to call one at a time also\n  // so we should use batch() as a transaction\n\n  const batch = firestore.batch();\n  docsToAdd.forEach(({\n    items,\n    title\n  }) => {\n    const docRef = collRef.doc(); // if id arg is null so it will return new objects;\n\n    batch.set(docRef, {\n      items,\n      title\n    });\n  });\n  return await batch.commit();\n};\nexport const checkIfUserAuthenticated = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribeAuth = auth.onAuthStateChanged(user => {\n      unsubscribeAuth();\n      resolve(user);\n    }, error => reject(error));\n  });\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/wafaa.nasr/Documents/Study/learn-react/crwn-clothing/client/src/firebase/firebase.utilities.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","createuserProfileDocument","userAuth","additionalData","userRef","doc","uid","userSnapshot","get","exists","email","displayName","createdAt","Date","set","error","console","log","message","convertCollectionsToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","acc","coll","createCollectionsAndDocuments","collectionKey","docsToAdd","collRef","collection","batch","forEach","docRef","commit","checkIfUserAuthenticated","Promise","resolve","reject","unsubscribeAuth","onAuthStateChanged","user"],"mappings":"AACA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,WAAW,EAAE,sCAHF;AAIXC,EAAAA,SAAS,EAAE,eAJA;AAKXC,EAAAA,aAAa,EAAE,EALJ;AAMXC,EAAAA,iBAAiB,EAAE,eANR;AAOXC,EAAAA,KAAK,EAAE,4CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,IAAI,GAAGX,QAAQ,CAACW,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGZ,QAAQ,CAACY,SAAT,EAAlB;AAEP,OAAO,MAAMC,cAAc,GAAG,IAAIb,QAAQ,CAACW,IAAT,CAAcG,kBAAlB,EAAvB;AACPD,cAAc,CAACE,mBAAf,CAAmC;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAnC;AAIA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACzE,MAAI,CAACD,QAAL,EAAe;AACf,QAAME,OAAO,GAAGR,SAAS,CAACS,GAAV,CAAe,SAAQH,QAAQ,CAACI,GAAI,EAApC,CAAhB;AACA,QAAMC,YAAY,GAAG,MAAMH,OAAO,CAACI,GAAR,EAA3B;;AAEA,MAAI,CAACD,YAAY,CAACE,MAAlB,EAA0B;AACtB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyBT,QAA/B;AACA,UAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACAT,MAAAA,OAAO,CAACU,GAAR,CAAY;AACRJ,QAAAA,KADQ;AAERC,QAAAA,WAFQ;AAGRC,QAAAA,SAHQ;AAIR,WAAGT;AAJK,OAAZ;AAMH,KAPD,CAQA,OAAOY,KAAP,EAAc;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,KAAK,CAACG,OAA7C;AACH;AACJ;;AACD,SAAOd,OAAP;AACH,CArBM;AAsBP,OAAO,MAAMe,uBAAuB,GAAIC,WAAD,IAAiB;AAEpD,QAAMC,sBAAsB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAqBlB,GAAG,IAAI;AACvD,UAAM;AAAEmB,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBpB,GAAG,CAACqB,IAAJ,EAAzB;AAEA,WAAO;AACHC,MAAAA,SAAS,EAAEC,SAAS,CAACJ,KAAK,CAACK,WAAN,EAAD,CADjB;AAEHC,MAAAA,EAAE,EAAEzB,GAAG,CAACyB,EAFL;AAGHN,MAAAA,KAHG;AAIHC,MAAAA;AAJG,KAAP;AAMH,GAT8B,CAA/B;AAUA,SAAOJ,sBAAsB,CAACU,MAAvB,CAA8B,CAACC,GAAD,EAAMC,IAAN,KAAe;AAChDD,IAAAA,GAAG,CAACC,IAAI,CAACT,KAAL,CAAWK,WAAX,EAAD,CAAH,GAAgCI,IAAhC;AACA,WAAOD,GAAP;AACH,GAHM,EAGJ,EAHI,CAAP;AAIH,CAhBM;AAiBP,OAAO,MAAME,6BAA6B,GAAG,OAAOC,aAAP,EAAsBC,SAAtB,KAAoC;AAC7E,QAAMC,OAAO,GAAGzC,SAAS,CAAC0C,UAAV,CAAqBH,aAArB,CAAhB,CAD6E,CAE7E;AACA;AACA;;AAEA,QAAMI,KAAK,GAAG3C,SAAS,CAAC2C,KAAV,EAAd;AACAH,EAAAA,SAAS,CAACI,OAAV,CAAkB,CAAC;AAAEf,IAAAA,KAAF;AAASD,IAAAA;AAAT,GAAD,KAAsB;AACpC,UAAMiB,MAAM,GAAGJ,OAAO,CAAChC,GAAR,EAAf,CADoC,CACP;;AAC7BkC,IAAAA,KAAK,CAACzB,GAAN,CAAU2B,MAAV,EAAkB;AAAEhB,MAAAA,KAAF;AAASD,MAAAA;AAAT,KAAlB;AACH,GAHD;AAIA,SAAO,MAAMe,KAAK,CAACG,MAAN,EAAb;AACH,CAZM;AAaP,OAAO,MAAMC,wBAAwB,GAAG,MAAM;AAC1C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,eAAe,GAAGpD,IAAI,CAACqD,kBAAL,CAAwBC,IAAI,IAAI;AACpDF,MAAAA,eAAe;AACfF,MAAAA,OAAO,CAACI,IAAD,CAAP;AACH,KAHuB,EAGrBlC,KAAK,IAAI+B,MAAM,CAAC/B,KAAD,CAHM,CAAxB;AAIH,GALM,CAAP;AAMH,CAPM;AAQP,eAAe/B,QAAf","sourcesContent":["\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyAnHmVYqlzt2jzH5vjVetqtgOks3aATVGk\",\n    authDomain: \"crwn-db-fce26.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-fce26.firebaseio.com\",\n    projectId: \"crwn-db-fce26\",\n    storageBucket: \"\",\n    messagingSenderId: \"1057394833621\",\n    appId: \"1:1057394833621:web:a0efaa4a5caa6afea1ca5c\",\n    measurementId: \"G-14J2ZWKY5P\"\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\n\n\n\nexport const createuserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const userSnapshot = await userRef.get();\n\n    if (!userSnapshot.exists) {\n        const { email, displayName } = userAuth;\n        const createdAt = new Date();\n        try {\n            userRef.set({\n                email,\n                displayName,\n                createdAt,\n                ...additionalData\n            });\n        }\n        catch (error) {\n            console.log('error while saving user', error.message);\n        }\n    }\n    return userRef;\n};\nexport const convertCollectionsToMap = (collections) => {\n\n    const transformedCollections = collections.docs.map(doc => {\n        const { title, items } = doc.data();\n\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,\n            items\n        }\n    });\n    return transformedCollections.reduce((acc, coll) => {\n        acc[coll.title.toLowerCase()] = coll;\n        return acc;\n    }, {});\n}\nexport const createCollectionsAndDocuments = async (collectionKey, docsToAdd) => {\n    const collRef = firestore.collection(collectionKey);\n    // Firebase can only call one set() a time.\n    // even if we called collRef.set(array) it's going to call one at a time also\n    // so we should use batch() as a transaction\n\n    const batch = firestore.batch();\n    docsToAdd.forEach(({ items, title }) => {\n        const docRef = collRef.doc();// if id arg is null so it will return new objects;\n        batch.set(docRef, { items, title });\n    });\n    return await batch.commit();\n}\nexport const checkIfUserAuthenticated = () => {\n    return new Promise((resolve, reject) => {\n        const unsubscribeAuth = auth.onAuthStateChanged(user => {\n            unsubscribeAuth();\n            resolve(user);\n        }, error => reject(error));\n    });\n}\nexport default firebase;    "]},"metadata":{},"sourceType":"module"}